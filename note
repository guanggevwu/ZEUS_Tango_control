scp -r C:\Users\User\Desktop\code\ZEUS_Tango_control\Basler\basler_client_GUI.py qzhangqz@141.213.13.38:/home/qzhangqz/dev/tango_project/tango/pytango_dev/Basler/
push_change_event seems only push change to Taurus instead of CLI
if server polling is not set, taurus will use its own polling and will call read_attr at its polling rate, except for 2D images (will not poll). Besides, it will do a instant read_attr after write_attr. If Taurus is not start, there will be no polling. When you read the attr, the read_attr function will be execute.
if server is set to polling to a number, read_attr will be called at the server polling rate and it will be called at server start. Taurus will not call read_attr, so it won't affect other client when server polling is set. CLI will not call read_attr before polling period is reached.

if Tango polling period < Taurus polling period, Taurus GUI will use Tango polling period only for str (not for 2D array with image module and int with label).
if Tango polling period > Taurus polling period, Taurus GUI will use Tango polling period.

To disable polling when using Taurus, set server polling to a large number.

# the statement about self.push_change_event may be wrong. 20240813

self.push_change_event will push changes to attr value but not to the Taurus GUI. For 2D image attr with taurus image module, push event will change GUI. Taurus GUI still uses the polling period defined by server or itself.

update the database server:
add export PKG_CONFIG_PATH=/usr/local/tango/lib/pkgconfig to .bashrc and do a source ~/.bashrc

20240903:
The TA2 FF camera (all other cameras looked fine) instantly shutdown after show "readu to receive request". The solution is by disabling hw_memorized for trigger source temperarily. Then start the server, reset polling from Jive and restart the server and then change the hw_memorized back. The reason could be I updated the code and make most of the attribute not polling but the database is not updated properly.

20440906:
hw_memorized order is determined by the appearance order of the attribute (not the write_attribute function).
